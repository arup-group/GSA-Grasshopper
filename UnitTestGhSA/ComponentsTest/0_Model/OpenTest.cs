using System;
using NUnit.Framework;
using GsaGH;
using GsaGH.Parameters;
using Rhino.Geometry;
using Rhino;
using Grasshopper;
using Grasshopper.Kernel.Types;
using Grasshopper.Kernel.Parameters;
using GsaAPI;

namespace ComponentsTest
{
    public class ModelTests
    {
        private static GsaModel TestModel;

        [TestCase]
        public void OpenComponentTest()
        {
            // create the component
            var comp = new GsaGH.Components.OpenModel();
            comp.CreateAttributes();

            // input parameter
            // set filename to be openend
            string tempPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            tempPath = System.IO.Path.Combine(tempPath, "Oasys", "GsaGrasshopper", "UnitTests");
            string file = tempPath + "\\Steel_Design_Simple.gwb";

            // try open file
            Model m = new Model();
            ReturnValue open = m.Open(file);

            // check if success
            if (open == ReturnValue.GS_FILE_OPEN_ERROR)
            {
                // if not create new directory
                System.IO.Directory.CreateDirectory(tempPath);
                // create webclient and download example file:
                System.Net.WebClient webClient = new System.Net.WebClient();
                webClient.DownloadFile("https://samples.oasys-software.com/gsa/10.1/Steel/Steel_Design_Simple.gwb", file);

                // try open the file again:
                open = m.Open(file);

                // if model is opened run it
                Assert.IsTrue(open == ReturnValue.GS_OK);
            }

            Component.SetInput(comp, file);

            // Get output from component
            GsaModelGoo output = (GsaModelGoo)Component.GetOutput(comp);

            // cast from -goo to Gsa-GH data type
            GsaModel model = new GsaModel();
            output.CastTo(ref model);

            Assert.AreEqual(file, model.FileName);
            Assert.IsNotNull(model.GUID);

            // set testmodel to be used by other tests
            TestModel = model;
        }

        [TestCase]
        public void GetGeometryComponentTest()
        {
            Assert.IsTrue(Rhino.RhinoApp.IsLicenseValidated, "Rhino must be licensed to run this test");
            
            // ensure model has been opened:
            if (TestModel == null)
                OpenComponentTest();

            // create the component
            var comp = new GsaGH.Components.GetGeometry();
            comp.CreateAttributes();

            // input parameter
            GsaModelGoo modelGoo = new GsaModelGoo(TestModel);
            Component.SetInput(comp, modelGoo);

            // Get output from component
            GsaNodeGoo output00 = (GsaNodeGoo)Component.GetOutput(comp, 0, 0, 0);
            GsaNodeGoo output01 = (GsaNodeGoo)Component.GetOutput(comp, 0, 0, 1);

            GsaElement1dGoo output1 = (GsaElement1dGoo)Component.GetOutput(comp, 1);

            GsaMember1dGoo output3= (GsaMember1dGoo)Component.GetOutput(comp, 4);

            //pManager.AddGenericParameter("Nodes", "No", "Nodes from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("1D Elements", "E1D", "1D Elements (Analysis Layer) from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("2D Elements", "E2D", "2D Elements (Analysis Layer) from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("3D Elements", "E3D", "3D Elements (Analysis Layer) from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("1D Members", "M1D", "1D Members (Design Layer) from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("2D Members", "M2D", "2D Members (Design Layer) from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("3D Members", "M3D", "3D Members (Design Layer) from GSA Model", GH_ParamAccess.list);

            // cast from -goo to Gsa-GH data type
            GsaNode node1 = new GsaNode();
            GsaNode node2 = new GsaNode();
            output00.CastTo(ref node1);
            output01.CastTo(ref node2);

            GsaElement1d elem = new GsaElement1d();
            output1.CastTo(ref elem);
            GsaMember1d mem = new GsaMember1d();
            output3.CastTo(ref mem);

            // test nodes are correct
            Assert.AreEqual(1, node1.ID);
            Assert.AreEqual(0, node1.Point.X, 1E-9);
            Assert.AreEqual(0, node1.Point.Y, 1E-9);
            Assert.AreEqual(0, node1.Point.Z, 1E-9);

            Assert.AreEqual(2, node2.ID);
            Assert.AreEqual(7.5, node2.Point.X, 1E-9);
            Assert.AreEqual(0, node2.Point.Y, 1E-9);
            Assert.AreEqual(0, node2.Point.Z, 1E-9);

            Assert.IsTrue(node1.Restraint.X);
            Assert.IsTrue(node1.Restraint.Y);
            Assert.IsTrue(node1.Restraint.Z);
            Assert.IsTrue(node1.Restraint.XX);
            Assert.IsFalse(node1.Restraint.YY);
            Assert.IsFalse(node1.Restraint.ZZ);

            Assert.IsFalse(node2.Restraint.X);
            Assert.IsTrue(node2.Restraint.Y);
            Assert.IsTrue(node2.Restraint.Z);
            Assert.IsFalse(node2.Restraint.XX);
            Assert.IsFalse(node2.Restraint.YY);
            Assert.IsFalse(node2.Restraint.ZZ);

            // test element and member
            Assert.AreEqual(1, elem.ID);
            Assert.AreEqual(0, elem.Line.PointAtStart.X, 1E-9);
            Assert.AreEqual(0, elem.Line.PointAtStart.Y, 1E-9);
            Assert.AreEqual(0, elem.Line.PointAtStart.Z, 1E-9);
            Assert.AreEqual(7.5, elem.Line.PointAtEnd.X, 1E-9);
            Assert.AreEqual(0, elem.Line.PointAtEnd.Y, 1E-9);
            Assert.AreEqual(0, elem.Line.PointAtEnd.Z, 1E-9);
            //Assert.AreEqual("CAT UB UB457x191x89", elem.Section.Section.Profile.Substring(0, 19));

            Assert.AreEqual(1, mem.ID);
            Assert.AreEqual(0, mem.PolyCurve.PointAtStart.X, 1E-9);
            Assert.AreEqual(0, mem.PolyCurve.PointAtStart.Y, 1E-9);
            Assert.AreEqual(0, mem.PolyCurve.PointAtStart.Z, 1E-9);
            Assert.AreEqual(7.5, mem.PolyCurve.PointAtEnd.X, 1E-9);
            Assert.AreEqual(0, mem.PolyCurve.PointAtEnd.Y, 1E-9);
            Assert.AreEqual(0, mem.PolyCurve.PointAtEnd.Z, 1E-9);

        }

        [TestCase]
        public void EditTitlesComponentTest()
        {
            // create the component
            var comp = new GsaGH.Components.EditGsaTitles();
            comp.CreateAttributes();

            //pManager.AddTextParameter("Job Number", "JN", "Set Job Number for this GSA Model", GH_ParamAccess.item);
            //pManager.AddTextParameter("Initials", "Ini", "Set Initials for this GSA Model", GH_ParamAccess.item);
            //pManager.AddTextParameter("Title", "Tit", "Set Title for this GSA Model", GH_ParamAccess.item);
            //pManager.AddTextParameter("Sub Title", "Sub", "Set Sub Title for this GSA Model", GH_ParamAccess.item);
            //pManager.AddTextParameter("Calculation", "Cal", "Set Calculation Heading for this GSA Model", GH_ParamAccess.item);
            //pManager.AddTextParameter("Notes", "Nt", "Set Notes for this GSA Model", GH_ParamAccess.item);
            
            // first we only set last two params
            Component.SetInput(comp, "Calc-head", 4);
            Component.SetInput(comp, "please note this", 5);

            // get output results (list with length = 6)
            GH_String output4 = (GH_String)Component.GetOutput(comp, 0, 0, 4);
            GH_String output5 = (GH_String)Component.GetOutput(comp, 0, 0, 5);

            //"Job Number: " + Util.GsaTitles.JobNumber,
            //    "Initials: " + Util.GsaTitles.Initials,
            //    "Title: " + Util.GsaTitles.Title,
            //    "Sub Title: " + Util.GsaTitles.SubTitle,
            //    "Calculation Header: " + Util.GsaTitles.Calculation,
            //    "Notes: " + Util.GsaTitles.Notes
            
            Assert.AreEqual("Calc-head", GsaGH.Titles.Calculation); //check calc-header has been set in doc
            Assert.AreEqual("Calculation Header: Calc-head", output4.ToString()); // check that calc-header is outputted in component

            Assert.AreEqual("please note this", GsaGH.Titles.Notes);
            Assert.AreEqual("Notes: please note this", output5.ToString());

            // now we run the open component test; the file have values for first four parameters
            // and should be able to set these in the document as they have not been user-set yet
            OpenComponentTest();
            
            // set the component to re-run
            comp.ExpireSolution(true);
            
            // get the output from the component again
            GH_String output0 = (GH_String)Component.GetOutput(comp, 0, 0, 0);
            GH_String output1 = (GH_String)Component.GetOutput(comp, 0, 0, 1);
            GH_String output2 = (GH_String)Component.GetOutput(comp, 0, 0, 2);
            GH_String output3 = (GH_String)Component.GetOutput(comp, 0, 0, 3);

            Assert.AreEqual("77107/75", GsaGH.Titles.JobNumber); //check JN is set in document
            Assert.AreEqual("Job Number: 77107/75", output0.ToString()); //check that JN is outputted in component

            Assert.AreEqual("PTAM", GsaGH.Titles.Initials);
            Assert.AreEqual("Initials: PTAM", output1.ToString());
            
            Assert.AreEqual("Steel Design Sample File", GsaGH.Titles.Title);
            Assert.AreEqual("Title: Steel Design Sample File", output2.ToString());

            Assert.AreEqual("Single beam", GsaGH.Titles.SubTitle);
            Assert.AreEqual("Sub Title: Single beam", output3.ToString());

            // now we try change the four first input parameters
            Component.SetInput(comp, "123456-78", 0);
            Component.SetInput(comp, "KPN", 1);
            Component.SetInput(comp, "myTitle", 2);
            Component.SetInput(comp, "mySub", 3);

            // get the output parameters again
            output0 = (GH_String)Component.GetOutput(comp, 0, 0, 0);
            output1 = (GH_String)Component.GetOutput(comp, 0, 0, 1);
            output2 = (GH_String)Component.GetOutput(comp, 0, 0, 2);
            output3 = (GH_String)Component.GetOutput(comp, 0, 0, 3);

            Assert.AreEqual("123456-78", GsaGH.Titles.JobNumber); //check JN is set in document
            Assert.AreEqual("Job Number: 123456-78", output0.ToString()); //check that JN is outputted in component

            Assert.AreEqual("KPN", GsaGH.Titles.Initials);
            Assert.AreEqual("Initials: KPN", output1.ToString());

            Assert.AreEqual("myTitle", GsaGH.Titles.Title);
            Assert.AreEqual("Title: myTitle", output2.ToString());

            Assert.AreEqual("mySub", GsaGH.Titles.SubTitle);
            Assert.AreEqual("Sub Title: mySub", output3.ToString());
        }

        [TestCase]
        public void GetAnalysisComponentTest()
        {
            // ensure model has been opened:
            if (TestModel == null)
                OpenComponentTest();

            // create the component
            var comp = new GsaGH.Components.GetAnalysis();
            comp.CreateAttributes();

            // input parameter
            GsaModelGoo modelGoo = new GsaModelGoo(TestModel);
            Component.SetInput(comp, modelGoo);

            //pManager.AddGenericParameter("Analysis Tasks", "Tasks", "List of analysis tasks in model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("Analysis Case Names", "Name", "Analysis case name", GH_ParamAccess.list);
            //pManager.AddGenericParameter("Load Case/Combination ID", "LC", "Load cases and combinations list", GH_ParamAccess.list);
            //pManager.AddGenericParameter("Analysis Case Description", "Desc", "Analysis case description", GH_ParamAccess.list);

            // get output
            var output0 = Component.GetOutput(comp, 0);
            var output10 = Component.GetOutput(comp, 1, 0, 0);
            var output11 = Component.GetOutput(comp, 1, 0, 1);
            var output20 = Component.GetOutput(comp, 2, 0, 0);
            var output21 = Component.GetOutput(comp, 2, 0, 1);
            var output30 = Component.GetOutput(comp, 3, 0, 0);
            var output31 = Component.GetOutput(comp, 3, 0, 1);

            Assert.AreEqual("Task 1", output0.ToString());
            Assert.AreEqual("DL", output10.ToString());
            Assert.AreEqual("LL", output11.ToString());
            Assert.AreEqual("1", output20.ToString());
            Assert.AreEqual("2", output21.ToString());
            Assert.AreEqual("L1", output30.ToString());
            Assert.AreEqual("L2", output31.ToString());
        }

        [TestCase]
        public void GetPropertiesComponentTest()
        {
            // ensure model has been opened:
            if (TestModel == null)
                OpenComponentTest();

            // create the component
            var comp = new GsaGH.Components.GetProperties();
            comp.CreateAttributes();

            // input parameter
            GsaModelGoo modelGoo = new GsaModelGoo(TestModel);
            Component.SetInput(comp, modelGoo);

            //pManager.AddGenericParameter("Sections", "PB", "Section Properties from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("2D Properties", "PA", "2D Properties from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("Springs", "PS", "Spring Properties from GSA Model", GH_ParamAccess.list);

            // get output
            GsaSectionGoo output = (GsaSectionGoo)Component.GetOutput(comp, 0);
            GsaSection sect = new GsaSection();
            
            Assert.IsTrue(output.CastTo(ref sect));
            Assert.AreEqual(1, sect.ID);
            //Assert.AreEqual("CAT UB UB457x191x89", sect.Section.Profile);
        }

        [TestCase]
        public void GetLoadsComponentTest()
        {
            // ensure model has been opened:
            if (TestModel == null)
                OpenComponentTest();

            // create the component
            var comp = new GsaGH.Components.GetLoads();
            comp.CreateAttributes();

            // input parameter
            GsaModelGoo modelGoo = new GsaModelGoo(TestModel);
            Component.SetInput(comp, modelGoo);

            //pManager.AddGenericParameter("Gravity Loads", "Grav", "Gravity Loads from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("Node Loads", "Node", "Node Loads from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("Beam Loads", "Beam", "Beam Loads from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("Face Loads", "Face", "Face Loads from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("Grid Point Loads", "Point", "Grid Point Loads from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("Grid Line Loads", "Line", "Grid Line Loads from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("Grid Area Loads", "Area", "Grid Area Loads from GSA Model", GH_ParamAccess.list);
            //pManager.AddGenericParameter("Grid Plane Surfaces", "GPS", "Grid Plane Surfaces from GSA Model", GH_ParamAccess.list);

            // get output
            GsaLoadGoo output20 = (GsaLoadGoo)Component.GetOutput(comp, 2, 0, 0);
            GsaLoadGoo output21 = (GsaLoadGoo)Component.GetOutput(comp, 2, 0, 1);
            GsaLoad load1 = output20.Value;
            GsaLoad load2 = output21.Value;

            Assert.AreEqual(-10000, load1.BeamLoad.BeamLoad.Value(0));
            Assert.AreEqual(BeamLoadType.UNIFORM.ToString(), load1.BeamLoad.BeamLoad.Type.ToString());
            Assert.AreEqual(-30000, load2.BeamLoad.BeamLoad.Value(0));
            Assert.AreEqual(BeamLoadType.POINT.ToString(), load2.BeamLoad.BeamLoad.Type.ToString());
        }
    }
}