using System;
using NUnit.Framework;
using GhSA;
using GhSA.Parameters;
using Rhino.Geometry;
using Rhino;
using Grasshopper;
using Grasshopper.Kernel.Types;
using GsaAPI;

namespace ComponentsTest
{
    public class ModelTests
    {
        private static GsaModel TestModel;

        [TestCase]
        public void OpenComponentTest()
        {
            // create the component
            var comp = new GhSA.Components.OpenModel();
            comp.CreateAttributes();

            // input parameter
            // set filename to be openend
            string file = GhSA.Util.Gsa.GsaPath.GetPath + "\\Samples\\Steel\\Steel_Design_Simple.gwb";
            Component.SetInput(comp, file);

            // set output data to Gsa-goo type
            GsaModelGoo output = (GsaModelGoo)Component.GetOutput(comp);

            // cast from -goo to Gsa-GH data type
            GsaModel model = new GsaModel();
            output.CastTo(ref model);

            Assert.AreEqual(file, model.FileName);
            Assert.IsNotNull(model.GUID);

            // set testmodel to be used by other tests
            TestModel = model;

        }

        [TestCase]
        public void EditTitlesComponentTest()
        {
            // create the component
            var comp = new GhSA.Components.EditGsaTitles();
            comp.CreateAttributes();

            //pManager.AddTextParameter("Job Number", "JN", "Set Job Number for this GSA Model", GH_ParamAccess.item);
            //pManager.AddTextParameter("Initials", "Ini", "Set Initials for this GSA Model", GH_ParamAccess.item);
            //pManager.AddTextParameter("Title", "Tit", "Set Title for this GSA Model", GH_ParamAccess.item);
            //pManager.AddTextParameter("Sub Title", "Sub", "Set Sub Title for this GSA Model", GH_ParamAccess.item);
            //pManager.AddTextParameter("Calculation", "Cal", "Set Calculation Heading for this GSA Model", GH_ParamAccess.item);
            //pManager.AddTextParameter("Notes", "Nt", "Set Notes for this GSA Model", GH_ParamAccess.item);
            
            // first we only set last two params
            Component.SetInput(comp, "Calc-head", 4);
            Component.SetInput(comp, "please note this", 5);

            // get output results (list with length = 6)
            GH_String output4 = (GH_String)Component.GetOutput(comp, 0, 0, 4);
            GH_String output5 = (GH_String)Component.GetOutput(comp, 0, 0, 5);

            //"Job Number: " + Util.GsaTitles.JobNumber,
            //    "Initials: " + Util.GsaTitles.Initials,
            //    "Title: " + Util.GsaTitles.Title,
            //    "Sub Title: " + Util.GsaTitles.SubTitle,
            //    "Calculation Header: " + Util.GsaTitles.Calculation,
            //    "Notes: " + Util.GsaTitles.Notes
            
            Assert.AreEqual("Calc-head", GhSA.Util.GsaTitles.Calculation); //check calc-header has been set in doc
            Assert.AreEqual("Calculation Header: Calc-head", output4.ToString()); // check that calc-header is outputted in component

            Assert.AreEqual("please note this", GhSA.Util.GsaTitles.Notes);
            Assert.AreEqual("Notes: please note this", output5.ToString());

            // now we run the open component test; the file have values for first four parameters
            // and should be able to set these in the document as they have not been user-set yet
            OpenComponentTest(); 

            // get the output from the component again
            GH_String output0 = (GH_String)Component.GetOutput(comp, 0, 0, 0);
            GH_String output1 = (GH_String)Component.GetOutput(comp, 0, 0, 1);
            GH_String output2 = (GH_String)Component.GetOutput(comp, 0, 0, 2);
            GH_String output3 = (GH_String)Component.GetOutput(comp, 0, 0, 3);

            Assert.AreEqual("77107/75", GhSA.Util.GsaTitles.JobNumber); //check JN is set in document
            Assert.AreEqual("Job Number: 77107/75", output0.ToString()); //check that JN is outputted in component

            Assert.AreEqual("PTAM", GhSA.Util.GsaTitles.Initials);
            Assert.AreEqual("Initials: PTAM", output1.ToString());
            
            Assert.AreEqual("Steel Design Sample File", GhSA.Util.GsaTitles.Title);
            Assert.AreEqual("Title: Steel Design Sample File", output2.ToString());

            Assert.AreEqual("Single beam", GhSA.Util.GsaTitles.SubTitle);
            Assert.AreEqual("Sub Title: Single beam", output3.ToString());

            // now we try change the four first input parameters
            Component.SetInput(comp, "123456-78", 0);
            Component.SetInput(comp, "KPN", 1);
            Component.SetInput(comp, "myTitle", 2);
            Component.SetInput(comp, "mySub", 3);

            // get the output parameters again
            output0 = (GH_String)Component.GetOutput(comp, 0, 0, 0);
            output1 = (GH_String)Component.GetOutput(comp, 0, 0, 1);
            output2 = (GH_String)Component.GetOutput(comp, 0, 0, 2);
            output3 = (GH_String)Component.GetOutput(comp, 0, 0, 3);

            Assert.AreEqual("123456-78", GhSA.Util.GsaTitles.JobNumber); //check JN is set in document
            Assert.AreEqual("Job Number: 123456-78", output0.ToString()); //check that JN is outputted in component

            Assert.AreEqual("KPN", GhSA.Util.GsaTitles.Initials);
            Assert.AreEqual("Initials: KPN", output1.ToString());

            Assert.AreEqual("myTitle", GhSA.Util.GsaTitles.Title);
            Assert.AreEqual("Title: myTitle", output2.ToString());

            Assert.AreEqual("mySub", GhSA.Util.GsaTitles.SubTitle);
            Assert.AreEqual("Sub Title: mySub", output3.ToString());
        }
    }
}