# https://aka.ms/yaml

trigger:
  branches:
    include:
    - release/*

variables:
  - group: s3PushInstallers
  - group: pipeline-tokens
  - name: configuration
    value: Release

pool: 'rhino-compute'

steps:
- powershell: Remove-Item -Path C:\Users\**\AppData\Roaming\Grasshopper\Libraries\*.ghlink
  displayName: 'Delete orphan .ghlink files'

- powershell: |
    Remove-Item .\*gsa.msi
    aws s3 cp s3://oasys-installer-store/GSA/nightly . --exclude "*" --include *Arup*.msi --recursive
    Get-ChildItem *.msi | Rename-Item -NewName gsa.msi -Force
  displayName: 'Download GSA nightly'
  failOnStderr: true

- powershell: |
    $installerPath = $(ls -r $(Pipeline.Workspace)\gsa.msi)
    Write-output "Installer Path: ${installerPath}"
    $app = Start-Process ${installerPath} -ArgumentList '/passive /quiet /l* msiLog.txt' -PassThru -Wait
    $app.WaitForExit()
    Write-Output "Exit code: $($app.ExitCode)"
    Write-Output "Exit time: $($app.ExitTime.ToUniversalTime().ToString('yyyy-MM-dd HH:mm:ss')) UTC"
    if ($app.ExitCode -ne 0) {
      Write-Error "Application could not be installed. Error code $($app.ExitCode)"
      exit(1)
    }
  displayName: 'Install GSA'
  failOnStderr: true
  
- powershell: |
    & 'C:\Program Files\Oasys\*\GSA.exe' /Register
  displayName: 'Register GSA COM'
  failOnStderr: false

- powershell: |
    Get-ChildItem -Path "HKLM:\Software\Classes\CLSID\{DA9D8CF0-713B-4E11-B1EB-5C2C47FD32A5}"  
  displayName: 'List GSA Registry Fields'

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  displayName: 'Restoring NuGet packages'
  inputs:
      command: 'restore'
      restoreSolution: 'GsaGH.sln'
  
- task: VSBuild@1
  displayName: 'Building project in $(configuration)'
  inputs:
    solution: 'GsaGH.sln'
    msbuildArgs: '/p:AppxBundlePlatforms="x64" /p:AppxPackageDir="$(build.artifactStagingDirectory)\AppxPackages" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload /m /nr:false /p:TreatWarningsAsErrors="true"'
    platform: 'x64'
    configuration: '$(configuration)'
    clean: true
  env:
    MSBUILDDISABLENODEREUSE: 1

- powershell: |
    dotnet test --collect:"XPlat Code Coverage" /TestAdapterPath:$env:UserProfile\.nuget\packages\coverlet.collector\3.2.0\build --results-directory .\results\gsagh .\GsaGHTests\bin\x64\Release\net48\GsaGHTests.dll
    dotnet test --collect:"XPlat Code Coverage" /TestAdapterPath:$env:UserProfile\.nuget\packages\coverlet.collector\3.2.0\build --results-directory .\results\integration  .\IntegrationTests\bin\x64\Release\net48\IntegrationTests.dll
  displayName: dotnet tests
  failOnStderr: true

- powershell: |
    $coverage_file_gsagh = (Resolve-Path $(System.DefaultWorkingDirectory)/results/gsagh/*/coverage.cobertura.xml).Path
    echo $coverage_file_gsagh
    $coverage_file_integration = (Resolve-Path $(System.DefaultWorkingDirectory)/results/integration/*/coverage.cobertura.xml).Path
    echo $coverage_file_integration
    Copy-Item $coverage_file_gsagh $(System.DefaultWorkingDirectory)\results\coverage_gsagh.xml
    Copy-Item $coverage_file_integration $(System.DefaultWorkingDirectory)\results\coverage_integration.xml
  displayName: Copy coverage files
  failOnStderr: true
  
- publish: $(System.DefaultWorkingDirectory)\results\coverage_gsagh.xml
  artifact: GsaGHTestsCoverage
  displayName: Publish GsaGHTest to Azure

- publish: $(System.DefaultWorkingDirectory)\results\coverage_integration.xml
  artifact: IntegrationTestsCoverage
  displayName: Publish IntegrationTest to Azure

- powershell: |
    $installerPath = $(ls -r $(Pipeline.Workspace)\gsa.msi)
    Write-output "Installer Path: ${installerPath}"
    $app = Start-Process "msiexec.exe" -ArgumentList "/x ${installerPath} /quiet /passive /norestart /l* msiUninstallLog.txt" -PassThru -Wait
    $app.WaitForExit()
    Write-Output "Exit code: $($app.ExitCode)"
    Write-Output "Exit time: $($app.ExitTime.ToUniversalTime().ToString('yyyy-MM-dd HH:mm:ss')) UTC"
    ### Success error codes: 0 = ERROR_SUCCESS, 1641 = ERROR_SUCCESS_REBOOT_INITIATED, 3010 = ERROR_SUCCESS_REBOOT_REQUIRED
    ### See https://docs.microsoft.com/en-us/windows/win32/msi/error-codes
    if (($app.ExitCode -eq 0) -or ($app.ExitCode -eq 1641) -or ($app.ExitCode -eq 3010)) {
      Write-Output "Application successfully uninstalled with exit code $($app.ExitCode)"
      rm $installerPath
      exit(0)
    } else {
      Write-Error "Application could not be uninstalled. Error code $($app.ExitCode)"
      exit(1)
    }
  condition: always()
  displayName: 'Uninstall Application'
