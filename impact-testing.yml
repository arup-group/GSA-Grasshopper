trigger:
  branches:
    include:
      - 'release/*'

variables:
  - group: s3PushInstallers
  - group: pipeline-tokens

pool: 'rhino-compute'

stages:
- stage: CheckRepoChanges
  displayName: 'Check Repository Changes'
  pool:
    vmImage: 'windows-latest'
  jobs:
  - job: CheckChanges
    displayName: 'Check for Changes in GsaGH and IntegrationTests'
    steps:

    - checkout: none

    - powershell: |
        Write-Output "Minimal checkout of repository...Branch:$(System.PullRequest.SourceBranch)"
        git clone --branch $(System.PullRequest.SourceBranch) --depth 100 --sparse https://$(GITHUB_TOKEN)@github.com/arup-group/GSA-Grasshopper.git .
      displayName: 'Minimal Checkout'
      env:
        GITHUB_TOKEN: $(GITHUB_TOKEN)

    - powershell: |
        Write-Output "Checking for changes in GsaGH/** and IntegrationTests/**..."
        git fetch origin
        git status

        $targetBranch = $(System.PullRequest.TargetBranch)
        $gitChanges = git diff --name-only HEAD..$targetBranch
        $unitTestsChanged = $false
        $integrationTestsChanged = $false

        foreach ($file in $gitChanges) {
          Write-Output "Checking file: $file"
          # both need to run
          if ($file -like 'GsaGH/*') {
            $unitTestsChanged = $true
            $integrationTestsChanged = $true
          }
          if ($file -like 'IntegrationTests/*') {
            $integrationTestsChanged = $true
          }
          if ($file -like 'GsaGHTests/*') {
            $unitTestsChanged = $true
          }
        }

        Write-Output "Setting pipeline variables based on changes detected..."
        Write-Output "UnitTests=$unitTestsChanged"
        echo "##vso[task.setvariable variable=UnitTests]$unitTestsChanged"
        Write-Output "Integration=$integrationTestsChanged"
        echo "##vso[task.setvariable variable=Integration]$integrationTestsChanged"
      displayName: 'Detect Changes in Repo'

- stage: ImpactTestingUnit
  displayName: 'Impact Testing (Unit)'
  dependsOn: CheckRepoChanges
  condition: always()
  # condition: eq(variables['UnitTests'], 'true')
  jobs:
  - job: UnitTests
    displayName: 'Run Unit Tests'
    steps:
    - checkout: self
    - powershell: |
        Write-Output "Running Unit Tests..."
      displayName: 'Run Unit Tests'

    - template: install-gsa.yml
      parameters:
        version: latest

    - template: build-solution.yml
      parameters:
        solution: 'GsaGH.sln'
        configuration: 'Debug'

    #- task: VisualStudioTestPlatformInstaller@1
    #  displayName: 'Install Test Platform'
    #  inputs:
    #      packageFeedSelector: 'nugetOrg'
    #      versionSelector: 'specificVersion'
    #      testPlatformVersion: '16.11.0'

    #- task: VSTest@2
    #  inputs:
    #    testSelector: 'testAssemblies'  # Enables Test Impact Analysis
    #    testAssemblyVer2: |
    #      GsaGHTests\bin\x64\Debug\net48\GsaGHTests.dll
    #    searchFolder: '$(System.DefaultWorkingDirectory)'
    #    runOnlyImpactedTests: true
    #    runInParallel: true
    #    failOnStderr: true
    #    codeCoverageEnabled: true
    #    testFiltercriteria: "FullyQualifiedName~GsaGHTests.Components.Analysis.CreateAnalysisTaskTests"

    #- powershell: |
    #    $coverage_file = (Resolve-Path $(Agent.TempDirectory)/TestResults/*.trx).Path
    #    echo $coverage_file
    #  displayName: 'Find TRX File'

    #- task: PublishBuildArtifacts@1
    #  condition: always()
    #  inputs:
    #    PathtoPublish: '$(Agent.TempDirectory)\TestResults'
    #    ArtifactName: 'Tests Results'
    #    publishLocation: 'Container'

    # Publish code coverage results v2
    # Publish any of the code coverage results from a build.
   # - task: PublishCodeCoverageResults@2
   #   condition: always()
   #   inputs:
   #     codeCoverageTool: 'Cobertura' # 'JaCoCo'
   #     summaryFileLocation: $coverage_file
        #pathToSources: # string. Path to Source files.
        #failIfCoverageEmpty: false # boolean. Fail if code coverage results are missing. Default: false.

    - template: dotnet-tests-with-coverage.yml

    - template: uninstall-gsa.yml

- stage: ImpactTestingIntegration
  displayName: 'Impact Testing (Integration)'
  dependsOn: CheckRepoChanges
  condition: eq(variables['Integration'], 'true')
  jobs:
  - job: IntegrationTests
    displayName: 'Run Integration Tests'
    steps:
    - powershell: |
        Write-Output "Running Integration Tests..."
      displayName: 'Run Integration Tests'
